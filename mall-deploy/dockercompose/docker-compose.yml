# 项目的版本
version: "3.0"
# 服务集合
services:
  portainer:
    image: portainer/portainer
    container_name: portainer
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    ports:
      - "8000:8000"
      - "9000:9000"
    networks:
      - beatshadow

  # mysql服务
  mysql: # 服务名称，唯一的
    container_name: mysql
    image: mysql:latest
    ports:
      - "3306:3306" # 设置端口,推荐使用字符串模式，因为yml解析原因
    volumes:
      - mysql_data:/var/lib/mysql
#    environment:
#      MYSQL_ROOT_PASSWORD: 123456
    env_file:   # 用于替换environment ，保证安全性
      - ./env/mysql.evn
    networks:
      - beatshadow
  redis:
    container_name: redis
    image: redis:latest
    ports:
      - "6379:6379"
    volumes:
      - ./conf/redis.conf:/usr/local/etc/redis/redis.conf
      - redis_data:/data
    command: "redis-server /usr/local/etc/redis/redis.conf --appendonly yes"  # 若是单个命令使用冒号 引号表示
    networks:
      - beatshadow
  web:
    build:
      context: ./dockerfile   #dockerfile所在目录
      dockerfile: Dockerfile.dockerfile
    image: tomcat:7
    container_name: tomcat_7
    ports:
      - "8080:8080"
    networks:
      - beatshadow
    depends_on:   # 真正体现编排，依赖于谁，【写的是服务的名字】，注意：不会等待服务彻底全部启动了才会去启动，只是等他们启动到一定程度就去启动
      - mysql
      - redis
    healthcheck:  #   监控检测
      test: ["CMD","curl","-f","http://localhost:8080"]
      interval: 1m30s
      timeout: 10s
      retries: 3
#    sysctls: # 修改核心数 ，ES安装需要
#    ulimits: # 修改进程数
#

volumes:  #什么上面服务使用的自动创建的卷名
  portainer_data:
  redis_conf:
  redis_data:
  mysql_data:  # 什么指令的卷迷名
    external: false #使用自定义的卷名，但是需要提前创建 docker volume create example

networks: # 定义服务使用的网桥
  beatshadow: # 默认创建的就是bridge
    external: false  # 使用外部网桥，但是需要提前创建 docker network create -d bridge beatshadow

