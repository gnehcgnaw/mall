# 项目的版本
version: "3.0"
# 服务集合
services:
  neo4j:
    container_name: neo4j
    image: neo4j:3.5.29-community
    env_file:
      - ./env/neo4j.env
    ports:
      - "7473:7473"
      - "7474:7474"
      - "7687:7687"
    volumes:
      - neo4j:/data
      - neo4j:/logs
    networks:
      - beatshadow
  elasticsearch:
    container_name: elasticsearch
    image: elasticsearch:${ELASTICSEARCH_VERSION}
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    env_file:
      - ./env/elasticsearch.env
    networks:
      - beatshadow
  skywalking-ui:
    container_name: skywalking-ui
    image: apache/skywalking-ui:${SKYWALKING_UI_VERSION}
    ports:
      - "8080:8080"
    depends_on:
      - skywalking-oap-server
    env_file:
      - ./env/skywalking/skywalking-ui.env
    networks:
      - beatshadow
  skywalking-oap-server:
    container_name: skywalking-oap-server
    image: apache/skywalking-oap-server:${SKYWALKING_OAP_SERVER_VERSION}
    restart: always
    ports:
      - "12800:12800"
      - "11800:11800"
      - "1234:1234"
    env_file:
      - ./env/skywalking/skywalking-ops-server.env
    networks:
      - beatshadow
    depends_on:
      - elasticsearch
  portainer:
    image: portainer/portainer
    container_name: portainer
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    ports:
      - "8000:8000"
      - "9000:9000"
    networks:
      - beatshadow
  nacos:
    image: nacos/nacos-server:${NACOS_VERSION}
    container_name: nacos
    ports:
      - "8848:8848"
    networks:
      - beatshadow
    env_file:
      - ./env/nacos.env
  # mysql服务
  mysql: # 服务名称，唯一的
    container_name: mysql
    image: mysql:latest
    ports:
      - "3306:3306" # 设置端口,推荐使用字符串模式，因为yml解析原因
    volumes:
      - mysql_data:/var/lib/mysql
      - mysql_conf:/etc/mysql/conf.d
      - mysql_logs:/logs
      - ./conf/nacos-mysql.sql:/docker-entrypoint-initdb.d/nacos-mysql.sql  # 初始化数据
#    environment:
#      MYSQL_ROOT_PASSWORD: 123456
    env_file:   # 用于替换environment ，保证安全性
      - ./env/mysql.env
        # MySQL8的密码验证方式默认是 caching_sha2_password，但是很多的连接工具还不支持该方式
        # 就需要手动设置下mysql的密码认证方式为以前的 mysql_native_password 方式
    command:
      --default-authentication-plugin=mysql_native_password
#      --character-set-server=utf8mb4
#      --collation-server=utf8mb4_general_ci
#      --explicit_defaults_for_timestamp=true
#      --lower_case_table_names=1
    networks:
      - beatshadow
  redis:
    container_name: redis
    image: redis:latest
    ports:
      - "6379:6379"
    volumes:
      - ./conf/redis.conf:/usr/local/etc/redis/redis.conf
      - redis_data:/data
    command: "redis-server /usr/local/etc/redis/redis.conf --appendonly yes"  # 若是单个命令使用冒号 引号表示
    networks:
      - beatshadow
#  web:
#    build:
#      context: ./dockerfile   #dockerfile所在目录
#      dockerfile: Dockerfile.dockerfile
#    image: tomcat:7
#    container_name: tomcat_7
#    ports:
#      - "8080:8080"
#    networks:
#      - beatshadow
#    depends_on:   # 真正体现编排，依赖于谁，【写的是服务的名字】，注意：不会等待服务彻底全部启动了才会去启动，只是等他们启动到一定程度就去启动
#      - mysql
#      - redis
#    healthcheck:  #   监控检测
#      test: ["CMD","curl","-f","http://localhost:8080"]
#      interval: 1m30s
#      timeout: 10s
#      retries: 3
#    sysctls: # 修改核心数 ，ES安装需要
#    ulimits: # 修改进程数
#

volumes:  #什么上面服务使用的自动创建的卷名
  neo4j:
  elasticsearch_data:
  portainer_data:
  redis_conf:
  redis_data:
  mysql_data:  # 什么指令的卷迷名
  mysql_conf:
  mysql_logs:
    external: false #使用自定义的卷名，但是需要提前创建 docker volume create example

networks: # 定义服务使用的网桥
  beatshadow: # 默认创建的就是bridge
    external: false  # 使用外部网桥，但是需要提前创建 docker network create -d bridge beatshadow

